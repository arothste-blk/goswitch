#!/bin/bash

# Copyright © Patrice FERLET <metal3d@gmail.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the “Software”), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge, publish, distribute, 
# sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is 
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all copies or substantial
# portions of the Software.
# 
# The Software is provided “as is”, without warranty of any kind, express or implied, including but
# not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement.
# In no event shall the authors or copyright holders be liable for any claim, damages or other liability, 
# whether in an action of contract, tort or otherwise, arising from, out of or in connection with the
# software or the use or other dealings in the Software.

_CMD=$(basename $0)
_ROOT="$HOME/.go"
_GOROOTPATH=${_ROOT}/root
_GOPATH=${_ROOT}/path
_VERSION=0.0.9
_CONF=$HOME/.config/goswitch


# taken from https://github.com/fatih/vim-go
_RECOMMENDED=(
"asmfmt:         go get -u github.com/klauspost/asmfmt/cmd/asmfmt"
"errcheck:       go get -u github.com/kisielk/errcheck"
"fillstruct:     go get -u github.com/davidrjenni/reftools/cmd/fillstruct"
"gocode:         go get -u -ldflags -H=windowsgui github.com/nsf/gocode"
"godef:          go get -u github.com/rogpeppe/godef"
"gogetdoc:       go get -u github.com/zmb3/gogetdoc"
"goimports:      go get -u golang.org/x/tools/cmd/goimports"
"golint:         go get -u github.com/golang/lint/golint"
"gometalinter:   go get -u github.com/alecthomas/gometalinter"
"gomodifytags:   go get -u github.com/fatih/gomodifytags"
"gorename:       go get -u golang.org/x/tools/cmd/gorename"
"gotags:         go get -u github.com/jstemmer/gotags"
"guru:           go get -u golang.org/x/tools/cmd/guru"
"impl:           go get -u github.com/josharian/impl"
"keyify:         go get -u github.com/dominikh/go-tools/cmd/keyify"
"motion:         go get -u github.com/fatih/motion"
"delve:          go get -u github.com/derekparker/delve/cmd/dlv"
"glide:          go get -u github.com/Masterminds/glide"
)


version(){
    echo "$_VERSION"
}

checkupdate(){
    make_config
    date +"%s" > $_CONF/lastchecked
    TMP=$(mktemp)
    curl -sSL https://api.github.com/repos/metal3d/goswitch/releases/latest > $TMP
    latest=$(awk '/"tag_name"/{print gensub(/"(.*)"./, "\\1", "g", $2)}' $TMP)
    latest=$(echo "$latest" | sed 's/^v//')

    checked=$(printf "$_VERSION\n$latest" | sort -ruV | head -n1)

    if [ $checked == $_VERSION ]; then
        if [ "$1" != "check" ] ; then
            echo -ne "\033[32m"
            echo "You're using the latest version $_VERSION"
            echo -ne "\033[0m"
        fi
    else
        case $1 in
            "warn"|"check")
                echo -ne "\033[33m"
                echo "A new version, $latest, can be installed. Please try to update $_CMD by using: $_CMD update"
                echo -ne "\033[0m"
                ;;
            "update")
                where=$(which $_CMD)
                echo "Installing new version $latest"
                url=$(awk '/"tarball_url"/{print gensub(/"(.*)"./, "\\1", "g", $2)}' $TMP)
                update "$url" "$where"
                ;;
        esac
    fi
    rm -rf $TMP
}

update() {
    url=$1
    where=$2

    F=$(mktemp -d)
    pushd $F 2>&1 > /dev/null
        curl -sSL "$url" | tar -xzf - --strip=1 */goswitch
        mv goswitch $where
        chmod +x $where
    popd 2>&1 > /dev/null
    rm -rf $F
}


auto_check(){
    make_config
    [ ! -f $_CONF/lastchecked ] && date +"%s" > $_CONF/lastchecked
    lastchecked=$(cat $_CONF/lastchecked)
    current=$(date +"%s")
    spent=$((current-lastchecked))
    if [ $spent -gt 86400 ]; then
        checkupdate "check"
    fi
}


make_config(){
    [ ! -d $_CONF ] && mkdir -p $_CONF
}

setpath(){
    VERSION=$1
    GOROOT=${_GOROOTPATH}/go-${VERSION}
    GOPATH=${_GOPATH}/go-${VERSION}

    if [ ! -d $GOROOT ]; then
        echo "Go $VERSION is not installed, would you like to install it right now ?"
        echo -n "yes, y ? "
        read -a RESP
        RESP=$(echo "$RESP" | tr "[a-z]" "[A-Z]") 
        echo "Answered: $RESP"
        case $RESP in
            YES|Y)
                install_go $VERSION
                ;;
            *)
                exit 1
                ;;
        esac
    fi

    echo "# you must call eval \$("$(basename $0)" use ${VERSION})"
    [ -d ${GOROOT} ] && echo "export GOROOT=${GOROOT}; export PATH=\$GOROOT/bin:\$PATH"
    [ -d ${GOPATH} ] && echo "export GOPATH=${GOPATH}; export PATH=\$GOPATH/bin:\$PATH"

    if [ "$2" == "default" ]; then

        START_COMMENT="- GOSWITCH - START - DO NOT REMOVE THAT COMMENT"
        END_COMMENT="- GOSWITCH - END - DO NOT REMOVE THAT COMMENT"

        # Remove old entry
        SEDREM="sed -i '/${START_COMMENT}/,/${END_COMMENT}/d' ~/.profile"
        eval $SEDREM

        # add new entry
        cat >> ~/.profile <<EOF
# ${START_COMMENT}
export GOPATH=${GOPATH}
export GOROOT=${GOROOT}
export PATH=\$GOPATH/bin:\$GOROOT/bin:\$PATH
# ${END_COMMENT}
EOF

    echo -e "\E[036mOk, you can now open new shell and/or reload ~/.profile (source ~/.profile)" >&2
    fi
}

install_go(){
    echo "install go $1"
    VERSION=$1
    u="https://storage.googleapis.com/golang/go${VERSION}.linux-amd64.tar.gz"
    echo "Downloading $u"
    GOROOT=${_GOROOTPATH}/go-${VERSION}
    [ -d ${GOROOT} ] && echo -e "\E[32m$GOROOT already exists, if you want to reinstall, please remove that directory first\E[0m" && exit 1

    pushd /tmp 2>&1 >/dev/null
        curl --fail -L -# "$u" -o go-${VERSION}.tgz
        RES=$?
        if [ $RES != "0" ]; then
            echo -ne "\n\n\E[31mGo version \"$VERSION\" not found, use \"${_CMD} available\" to check version\E[0m\n"
            exit 1
        fi

        tar xf go-${VERSION}.tgz
        rm -rf go-${VERSION}.tgz

        mkdir -p $_GOROOTPATH
        mv go ${_GOROOTPATH}/go-${VERSION}
    popd 2>&1 >/dev/null

    # create GOPATH
    GOPATH=${_GOPATH}/go-${VERSION}
    mkdir -p $GOPATH/bin
    mkdir -p $GOPATH/pkg
    mkdir -p $GOPATH/src
}


list_go(){
    for v in $(ls -1 $_GOROOTPATH); do
        echo $v | sed 's/^go-//'
    done
}

remote_list(){
    curl -sL https://golang.org/dl/ | grep -o 'id="go.*"' | sed -r 's/id=".*go(.*)"/\1/' | uniq | sort -ru
}

printHelp(){
    echo "${_CMD} command <version>"
    echo "Commands:"
    echo "   list:                           list installed version from $_ROOT directory"
    echo
    echo "   available:                      list installable go version from golang.org"
    echo
    echo "   install <version>:              install go-<version> (version should be x.y.z,"
    echo "                                   eg. ${_CMD} install 1.9.1)"
    echo
    echo "   use <version>:                  to be call with \"eval \$(${_CMD} use <version>)\""
    echo "                                   to set env vars on current shell"
    echo
    echo "   use <version> default:          set ~/.profile to use that version in next login session"
    echo "                                   or if you "source" ~/.profile script"
    echo
    echo "   local-project [dir]:            use [dir] or current directory if [dir] is not"
    echo "                                   provided to create a local projecct. That creates"
    echo "                                   a bin/activate and bin/deactivate to use with 'source' command"
    echo "                                   eg. ${_CMD} local-project /tmp/myproject"
    echo
    echo "   bash-completion:                set bash completion, please do 'source <(${_CMD} bash-completion)'"
    echo "                                   You may add this line in you ~/.bashrc"
    echo
    echo "   install-recommended <name|all>: install recommended tool \"name\" to work with Go,"
    echo "                                   giving \"all\" will install the entire recommended list,"
    echo "                                   see \"list-recommended\" command"
    echo
    echo "   list-recommended:               list recommended gopackage to install"
    echo
    echo "   check-update:                   check latest version of $_CMD, doesn't install"
    echo
    echo "   update:                         update $_CMD to the latest version"
    echo
    echo "   -h|--help:                      print this help"
    echo
    echo "   -v|--version|-version:          print version ($_VERSION)"
}


local_project() {
    [[ -z "$1" ]] && folder="." || folder=$1
    folder=$(realpath $folder)
    mkdir -p ${folder}/{src,bin,pkg}
    cat > ${folder}/bin/activate << EOF
export GOPATH=${folder}:\$GOPATH
export PATH=${folder}/bin:\$PATH
echo "Now in a local project for Go
echo "go get command will install in ${folder}/bin and ${folder}/src
#exec $SHELL
EOF

    cat > ${folder}/bin/deactivate << EOF
export GOPATH=$GOPATH
export GOROOT=$GOROOT
export PATH=$PATH
#exec $SHELL
EOF

    echo "You can now use:" 
    echo "source ${folder}/bin/activate"
    echo "to activate environemnet"
    echo 
    echo "You can deactivate environment using"
    echo "source ${folder}/deactivate"
}

completion() {
    cat << EOF
# bash completion for ${_CMD}                                   -*- shell-script -*-
__start_${_CMD}()
{
    local cur prev opts
    COMPREPLY=()
    cur="\${COMP_WORDS[COMP_CWORD]}"
    prev="\${COMP_WORDS[COMP_CWORD-1]}"
    opts="install use list available local-project --help -h help bash-completion install-recommended list-recommended -v --version version check-update update"

    case \${prev} in 
        local-project)
            COMPREPLY=( \$(compgen -f \${cur}) )
            return 0
            ;;
        install-recommended)
            opts=\$(${_CMD} list-recommended)" all"
            ;;
        install)
            opts=\$(${_CMD} available)
            ;;
        use)
            opts=\$(${_CMD} list)
            ;;
    esac

    COMPREPLY=( \$(compgen -W "\${opts}" -- \${cur}) )
    return 0
}
complete -o default -F __start_${_CMD} ${_CMD}
EOF

}

list_recommended(){
    COUNT=${#_RECOMMENDED[@]}
    for ((i=0; i<$COUNT; i++)); do
        line=${_RECOMMENDED[i]}
        echo $line | cut -f1 -d":"
    done
}

install_recommended(){
    toinstall=$1
    
    if [ -z "$toinstall" ]; then
        echo -n "You need to give a recommended package name, (see ${_CMD} list-recommended)"
        echo -n " or \"all\" to install everything"
        echo
        exit 1
    fi

    COUNT=${#_RECOMMENDED[@]}
    OK="false"
    for ((i=0; i<$COUNT; i++)); do
        line=${_RECOMMENDED[i]}
        what=$(echo $line | cut -f1 -d":")
        if [ $toinstall == "all" ] || [ $toinstall == $what ]; then
            goget=$(echo $line | cut -f2 -d":")
            echo "Installing $what"
            echo $goget
            $goget
            OK="true"
        fi
    done

    if [ $OK != "true" ]; then
        echo -n "$toinstall package not found in recommended list, see \"${_CMD} list-recommended\""
        echo -n " to check if you didn't make a mistake"
        echo 
        exit 1
    fi
}


# make a check of version only for other commands than
# completion and update/check-update commands, to not 
# make noises when opening shell.
case $1 in
    bash-completion)
        completion
        ;;
    
    install)
        auto_check
        install_go $2
        ;;
    
    use)
        auto_check
        setpath $2 $3
        ;;
    
    list)
        auto_check
        list_go
        ;;
    
    available)
        auto_check
        remote_list
        ;;
    
    -h|--help|help)
        auto_check
        printHelp
        ;;

    -v|--version|version)
        auto_check
        version
        ;;

    local-project)
        auto_check
        local_project $2
        ;;

    list-recommended)
        auto_check
        list_recommended
        ;;

    install-recommended)
        auto_check
        install_recommended $2
        ;;

    check-update)
        checkupdate "warn"
        ;;

    update)
        checkupdate "update"
        ;;

    *)
        auto_check
        printHelp
        exit 1
        ;;
esac
