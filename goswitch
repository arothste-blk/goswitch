#!/bin/bash

# Copyright © Patrice FERLET <metal3d@gmail.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the “Software”), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge, publish, distribute, 
# sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is 
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all copies or substantial
# portions of the Software.
# 
# The Software is provided “as is”, without warranty of any kind, express or implied, including but
# not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement.
# In no event shall the authors or copyright holders be liable for any claim, damages or other liability, 
# whether in an action of contract, tort or otherwise, arising from, out of or in connection with the
# software or the use or other dealings in the Software.

_CMD=$(basename $0)
_ROOT=${GS_ROOT:-${HOME}/.go}
_GOROOTPATH=${_ROOT}/root
_GOPATH=${_ROOT}/path
_VERSION=1.0.5
_CONF=$HOME/.config/goswitch
_DIALOG=${GS_DIALOG}


# taken from https://github.com/fatih/vim-go
_RECOMMENDED=(
"asmfmt:         go get -u github.com/klauspost/asmfmt/cmd/asmfmt"
"errcheck:       go get -u github.com/kisielk/errcheck"
"fillstruct:     go get -u github.com/davidrjenni/reftools/cmd/fillstruct"
"gocode:         go get -u -ldflags -H=windowsgui github.com/nsf/gocode"
"godef:          go get -u github.com/rogpeppe/godef"
"gogetdoc:       go get -u github.com/zmb3/gogetdoc"
"goimports:      go get -u golang.org/x/tools/cmd/goimports"
"golint:         go get -u github.com/golang/lint/golint"
"gometalinter:   go get -u github.com/alecthomas/gometalinter"
"gomodifytags:   go get -u github.com/fatih/gomodifytags"
"gorename:       go get -u golang.org/x/tools/cmd/gorename"
"gotags:         go get -u github.com/jstemmer/gotags"
"guru:           go get -u golang.org/x/tools/cmd/guru"
"impl:           go get -u github.com/josharian/impl"
"keyify:         go get -u github.com/dominikh/go-tools/cmd/keyify"
"motion:         go get -u github.com/fatih/motion"
"delve:          go get -u github.com/derekparker/delve/cmd/dlv"
"glide:          go get -u github.com/Masterminds/glide"
)


# get the version of goswitch.
version(){
    echo "$_VERSION"
}

# check if new goswitch version exists.
checkupdate(){
    make_config
    date +"%s" > $_CONF/lastchecked
    local TMP=$(mktemp)
    curl -sSL https://api.github.com/repos/metal3d/goswitch/releases/latest > $TMP
    local latest=$(awk '/"tag_name"/{print gensub(/"(.*)"./, "\\1", "g", $2)}' $TMP)
    latest=$(echo "$latest" | sed 's/^v//')

    local checked=$(printf "$_VERSION\n$latest" | sort -ruV | head -n1)

    if [ $checked == $_VERSION ]; then
        if [ "$1" != "check" ] ; then
            echo -ne "\033[32m"
            echo "You're using the latest version $_VERSION"
            echo -ne "\033[0m"
        fi
    else
        case $1 in
            "warn"|"check")
                echo -ne "\033[33m"
                echo "A new version, $latest, can be installed. Please try to update $_CMD by using: $_CMD update"
                echo -ne "\033[0m"
                ;;
            "update")
                local where=$(which $_CMD)
                echo "Installing new version $latest"
                local url=$(awk '/"tarball_url"/{print gensub(/"(.*)"./, "\\1", "g", $2)}' $TMP)
                update "$url" "$where"
                ;;
        esac
    fi
    rm -rf $TMP
}

# update goswitch to the latest version.
update() {
    local url=$1
    local where=$2

    local F=$(mktemp -d)
    pushd $F 2>&1 > /dev/null
        curl -sSL "$url" | tar -xzf - --strip=1 */goswitch
        mv goswitch $where
        chmod +x $where
    popd 2>&1 > /dev/null
    rm -rf $F
}


# called periodically to check if a newest goswitch version is available.
auto_check(){
    make_config
    [ ! -f $_CONF/lastchecked ] && date +"%s" > $_CONF/lastchecked
    local lastchecked=$(cat $_CONF/lastchecked)
    local current=$(date +"%s")
    local spent=$((current-lastchecked))
    if [ $spent -gt 86400 ]; then
        checkupdate "check"
    fi
}


# create configuration directory.
make_config(){
    [ ! -d $_CONF ] && mkdir -p $_CONF
}

# use the specified version
setpath(){
    local VERSION=$1

    if [ $VERSION == "latest" ]; then
        VERSION=$(remote_list | head -n1)
    fi

    local GOROOT=${_GOROOTPATH}/go-${VERSION}
    local GOPATH=${_GOPATH}/go-${VERSION}

    if [ ! -d $GOROOT ]; then
        echo "Go $VERSION is not installed, would you like to install it right now ?"
        echo -n "yes, y ? "
        read -a RESP
        RESP=$(echo "$RESP" | tr "[a-z]" "[A-Z]") 
        echo "Answered: $RESP"
        case $RESP in
            YES|Y)
                install_go $VERSION
                ;;
            *)
                exit 1
                ;;
        esac
    fi

    # Find old goroot and gopath from PATH, then
    # remove from the list.
    local P=$(IFS=:; echo $PATH)
    local NEWPATH=()
    for p in ${P[@]}; do
        if [ "$(echo "$p" | grep -P "$_ROOT")" == "" ] ; then
            NEWPATH+=( $p )
        fi
    done
    NEWPATH=$(IFS=:; echo "${NEWPATH[*]}")

    echo "# you must call eval \$("$(basename $0)" use ${VERSION})"
    echo "# reset path without old gopath"
    echo "export PATH=${NEWPATH}"
    [ -d ${GOROOT} ] && echo "export GOROOT=${GOROOT}; export PATH=\$GOROOT/bin:\$PATH"
    [ -d ${GOPATH} ] && echo "export GOPATH=${GOPATH}; export PATH=\$GOPATH/bin:\$PATH"

    if [ "$2" == "default" ]; then

        local START_COMMENT="- GOSWITCH - START - DO NOT REMOVE THAT COMMENT"
        local END_COMMENT="- GOSWITCH - END - DO NOT REMOVE THAT COMMENT"

        # Remove old entry
        local SEDREM="sed -i '/${START_COMMENT}/,/${END_COMMENT}/d' ~/.profile"
        eval $SEDREM

        # add new entry
        cat >> ~/.profile <<EOF
# ${START_COMMENT}
export GOPATH=${GOPATH}
export GOROOT=${GOROOT}
export PATH=\$GOPATH/bin:\$GOROOT/bin:\$PATH
# ${END_COMMENT}
EOF

    echo -e "\033[36mOk, you can now open new shell and/or reload ~/.profile (source ~/.profile)\033[0m" >&2
    fi
}


# install specified golang version.
install_go(){

    local VERSION=$1

    if [ "$VERSION" == "latest" ]; then
        VERSION=$(remote_list | head -n1)
    fi

    echo "install go version $VERSION"

    local ARCH=$(uname -p | tr "[A-Z]" "[a-z]")
    case $ARCH in
        x86_64)
            ARCH="amd64"
    esac
    local SYS=$(uname -s | tr "[A-Z]" "[a-z]")

    local u="https://storage.googleapis.com/golang/go${VERSION}.${SYS}-${ARCH}.tar.gz"

    echo "Downloading $u"
    local GOROOT=${_GOROOTPATH}/go-${VERSION}
    [ -d ${GOROOT} ] && echo -e "\E[32m$GOROOT already exists, if you want to reinstall, please remove that directory first\E[0m" && exit 1

    pushd /tmp 2>&1 >/dev/null
        curl --fail -L -# "$u" -o go-${VERSION}.tgz
        RES=$?
        if [ $RES != "0" ]; then
            echo -ne "\n\n\E[31mGo version \"$VERSION\" for ${SYS} ${ARCH} not found, use \"${_CMD} available\" to check version\E[0m\n"
            exit 1
        fi

        tar xf go-${VERSION}.tgz
        rm -rf go-${VERSION}.tgz

        mkdir -p $_GOROOTPATH
        mv go ${_GOROOTPATH}/go-${VERSION}
    popd 2>&1 >/dev/null

    # create GOPATH
    local GOPATH=${_GOPATH}/go-${VERSION}
    mkdir -p $GOPATH/bin
    mkdir -p $GOPATH/pkg
    mkdir -p $GOPATH/src
}

# list installed golang on the system.
list_go(){
    local installed=""
    for v in $(ls -1 $_GOROOTPATH); do
        installed+=$(echo $v | sed 's/^go-//')"\n"
    done
    echo -e $installed | sort -Vru
}

# liste available golang version from website.
remote_list(){
    curl -sL https://golang.org/dl/ | grep -o 'id="go.*"' | sed -r 's/id=".*go(.*)"/\1/' | uniq | sort -Vru
}

# displays help.
printHelp(){
    echo "${_CMD} command <version>"
    echo
    echo "You can override some configuration by setting values in $_CONF/config.cfg file,"
    echo "or using environment variables:"
    echo "    GS_ROOT:   directory where go will be installed"
    echo "    GS_DIALOG: force dialog to be one of zenity, whiptail or dialog"
    echo "Example:"
    echo -e "\033[34m    GS_ROOT=/tmp/gopath GS_DIALOG=whiptail ${_CMD} install latest\033[0m"
    echo 
    echo "Commands:"
    echo "   list:                           list installed version from $_ROOT directory"
    echo
    echo "   available:                      list installable go version from golang.org"
    echo
    echo "   install <version>:              install go-<version> (version should be x.y.z,"
    echo "                                   eg. ${_CMD} install 1.9.1)"
    echo
    echo "   install-package <keyword>:      Search package by keyword on go-search.org, then display a list to "
    echo "                                   let you select which one to install."
    echo 
    echo "   use <version>:                  to be call with \"eval \$(${_CMD} use <version>)\""
    echo "                                   to set env vars on current shell"
    echo
    echo "   use <version> default:          set ~/.profile to use that version in next login session"
    echo "                                   or if you "source" ~/.profile script"
    echo
    echo "   local-project [dir] [version]:  use [dir] or current directory if [dir] is not"
    echo "                                   provided to create a local projecct. That creates"
    echo "                                   a bin/activate to use with 'source' command"
    echo "                                   eg. ${_CMD} local-project /tmp/myproject"
    echo "                                   If [version] is not set, the current go version will be used"
    echo
    echo "   bash-completion:                set bash completion, please do 'source <(${_CMD} bash-completion)'"
    echo "                                   You may add this line in you ~/.bashrc"
    echo
    echo "   install-recommended <name|all>: install recommended tool \"name\" to work with Go,"
    echo "                                   giving \"all\" will install the entire recommended list,"
    echo "                                   see \"list-recommended\" command"
    echo
    echo "   list-recommended:               list recommended gopackage to install"
    echo
    echo "   check-update:                   check latest version of $_CMD, doesn't install"
    echo
    echo "   update:                         update $_CMD to the latest version"
    echo
    echo "   -h|--help:                      print this help"
    echo
    echo "   -v|--version|-version:          print version ($_VERSION)"
}

# create local project with a specified golang version, create directories
# and initiate a "activate" script.
local_project() {
    local folder=""
    local current_version=""

    [ -z "$1" ] && folder="." || folder=$1

    local _USE=""
    if [ -n "$2" ]; then
        # use another version
        ${_CMD} install $2
        _USE="source <(${_CMD} use $2)"
    else
        current_version=$(echo $PATH | awk -F":" '/go-/{print gensub(/.*go-([0-9]+\.[0-9]+\.[0-9]+).*/,"\\1", "g", $0)}' | head -n1)
        [ x"$current_version" != "x" ] && _USE="source <(${_CMD} use ${current_version})"
    fi
    folder=$(realpath $folder)
    mkdir -p ${folder}/{src,bin,pkg}
    cat > ${folder}/bin/activate << EOF
# This script should be activated by a "source" command:
# source ${folder}/bin/activate
# Ideas come from Pyton virtual env, thanks to the python
# community.
# To deactivate environment, the "deactivate" function 
# should be called as a standard command.

# Deactivation command (function set by environment activation)
function deactivate() {
    if [ -n "\$_OLD_GOROOT" ]; then
        GOROOT="\$_OLD_GOROOT"
        unset _OLD_GOPATH
    fi
    if [ -n "\$_OLD_GOPATH" ]; then
        GOPATH="\$_OLD_GOPATH"
        unset _OLD_GOPATH
    fi

    if [ -n "\$_OLD_PATH" ]; then
        PATH="\$_OLD_PATH"
        unset _OLD_PATH
    fi

    if [ -n "\$_OLD_PS1" ]; then
        PS1="\$_OLD_PS1"
        unset _OLD_PS1
    fi
    
    export PS1
    export PATH
    export GOROOT
    export GOPATH

    unset deactivate
    unset VIRTUAL_ENV
}

# that var is used by several bash/sh/zsh configuration to set PS1
VIRTUAL_ENV=${folder}

# Keep old paths
export _OLD_GOROOT=\$GOROOT
export _OLD_GOPATH=\$GOPATH
export _OLD_PATH=\$PATH
export _OLD_PS1=\$PS1

${_USE}

# set new paths
export GOPATH=${folder}:\$GOPATH
export PATH=${folder}/bin:\$PATH

proj=\`basename ${folder}\`
export PS1="(\$proj) \$PS1"

# Taken from python virtualenv
# This should detect bash and zsh, which have a hash command that must
# be called to get it to forget past commands.  Without forgetting
# past commands the \$PATH changes we made may not be respected
if [ -n "\$BASH" -o -n "\$ZSH_VERSION" ] ; then
    hash -r
fi

echo -ne "\\033[32m"
echo "Now in a local project for Go"
echo "go get command will install in ${folder}/bin and ${folder}/src"
echo "Your project sources should be located in ${folder}/src/<DIR> where <DIR> are packages directory (eg. ${folder}/src/mypackage"
echo 
echo -ne "\\033[0m"
EOF

    echo "You can now use:" 
    echo "source ${folder}/bin/activate"
    echo "to activate environemnet"
    echo 
    echo "You can deactivate environment using:"
    echo "deactivate"
}

# generate bash completion function.
completion() {
    cat << EOF
# bash completion for ${_CMD}                                   -*- shell-script -*-
__start_${_CMD}()
{
    local cur prev opts
    COMPREPLY=()
    cur="\${COMP_WORDS[COMP_CWORD]}"
    prev="\${COMP_WORDS[COMP_CWORD-1]}"
    opts="install use list available local-project --help -h help bash-completion install-package install-recommended list-recommended -v --version version check-update update"

    case \${prev} in 
        local-project)
            COMPREPLY=( \$(compgen -f \${cur}) )
            return 0
            ;;
        install-recommended)
            opts=\$(${_CMD} list-recommended)" all"
            ;;
        install)
            opts=\$(${_CMD} available)
            ;;
        use)
            opts=\$(${_CMD} list)
            ;;
    esac

    COMPREPLY=( \$(compgen -W "\${opts}" -- \${cur}) )
    return 0
}
complete -o default -F __start_${_CMD} ${_CMD}
EOF

}

# list recommended packages.
list_recommended(){
    local COUNT=${#_RECOMMENDED[@]}
    for ((i=0; i<$COUNT; i++)); do
        local line=${_RECOMMENDED[i]}
        echo $line | cut -f1 -d":"
    done
}

# install recommended packages.
install_recommended(){
    local toinstall=$1
    
    if [ -z "$toinstall" ]; then
        echo -n "You need to give a recommended package name, (see ${_CMD} list-recommended)"
        echo -n " or \"all\" to install everything"
        echo
        exit 1
    fi

    local COUNT=${#_RECOMMENDED[@]}
    local OK="false"
    for ((i=0; i<$COUNT; i++)); do
        local line=${_RECOMMENDED[i]}
        local what=$(echo $line | cut -f1 -d":")
        if [ $toinstall == "all" ] || [ $toinstall == $what ]; then
            local goget=$(echo $line | cut -f2 -d":")
            echo "Installing $what"
            echo $goget
            eval $goget
            OK="true"
        fi
    done

    if [ $OK != "true" ]; then
        echo -n "$toinstall package not found in recommended list, see \"${_CMD} list-recommended\""
        echo -n " to check if you didn't make a mistake"
        echo 
        exit 1
    fi
}

# search package by keyword on go-search.org, then display the list.
# The selected package is installed.
search_install(){
    # try to find jq
    which jq 2>&1 >/dev/null
    if [ $? != 0 ]; then
        echo -ne "\033[31m"
        echo "Sorry, you should install \"jq\" command to be able to search and install package"
        echo -ne "\033[0m"
        exit 1
    fi

    local search=$1
    if [ "$search" == "" ]; then
        echo -ne "\033[31m"
        echo "Please, give a package name to search"
        echo -ne "\033[0m"
        exit 1
    fi

    echo "Searching $search on go-search.org..."
    local found=$(curl -sSL "http://go-search.org/api?action=search&q=$search" | \
        jq -r '.hits | map([.package,.synopsis] | join("| ")) | join("|")')

    local dialog="$_DIALOG"
    local OLDIFS=$IFS
    local IFS="|"

    options=()
    for f in $found; do
        if [ "$f" == " " ]; then
            f="(no description)"
        else
            f=$(echo "$f" | sed -r "s/^ //")
        fi
        options+=( "$f" )
    done

    title="Select a package - results from go-seach.org"

    if [ "$dialog" == "" ]; then
        if [ "$XDG_CURRENT_DESKTOP" != "" ]; then
            # we've got desktop, try to find zenity
            dialog=$(which zenity 2>&1 >/dev/null && echo "zenity" || echo "dialog" )
        else
            # use whiptail or dialog ?
            dialog=$(which whiptail 2>&1 >/dev/null && echo "whiptail" || echo "$dialog")
        fi
    fi


    local CHOOSE=""
    local cols=""
    local rows=""

    if [ "$dialog" == "zenity" ]; then
        CHOOSE=$($dialog --title="$title" --width=600 --height=400 \
            --list --column="Import" --column="Description" "${options[@]}")
    else
        cols=$(stty size | cut -f2 -d" ")
        rows=$(stty size | cut -f1 -d" ")
        T=$(mktemp)
        
        $dialog --title "$title" --menu "Select one" $((rows-4)) $((cols-4)) $((rows-10)) -- ${options[*]} 2>$T
        CHOOSE=$(cat $T)
        rm -f $T
    fi

    if [ "$CHOOSE" != "" ]; then
        local install_cmd="go get -u"
        local RET=""
        if [ -f ./glide.yaml ]; then

            local msg=""
            msg+="Glide is detected in you current directory, "
            msg+="would you like to use Glide to install $CHOOSE package as a vendor package ?"

            local note="Note: if you choose glide installation, please check your terminal to answer some questions."

            if [ $dialog == "zenity" ]; then
                $dialog --title="Glide usage" --question --text="${msg}\n\n<i>${note}</i>" --width=340
                RET=$?
            else
                $dialog --title "Glide usage" --yesno "${msg}\n\n${note}" 20 50
                RET=$?
            fi

            if [ $RET == 0 ]; then
                install_cmd="glide get"
            fi
        fi

        # back to default IFS
        IFS=$OLDIFS
        local WAIT=3
        echo "Will install $CHOOSE"
        # start at WAIT+1 to let one second pass.
        for i in $(seq $((WAIT+1))); do
            echo -ne "You've got 3 seconds to cancel (press CTRL+C): $((WAIT-i+1)) \r"
            sleep 1
        done

        echo "installing..."
        eval $install_cmd "$CHOOSE"
    else
        echo "Canceled"
    fi
}


load_config() {
    make_config
    local config_file=$_CONF/config.cfg

    if [ ! -f $config_file ]; then
        cat > $config_file << EOF
# Where golang will be installed
#root = \$HOME/.go

# Prefered dialog, goswitch detect if a X session is active
# and tries to use zenity. If you want to always use dialog, whiptail
# or xdialog, set it here
#prefered_dialog=dialog
EOF
        echo -e "\033[34m$config_file created\033[0m" >&2
    fi
    

    while read line; do
        line=$(echo "$line" | awk -F'#' '{print $1}' )
        [ "$line" == "" ] && continue

        local IFS="="
        line=( $line )
        local key=$(echo "${line[0]}" | sed 's/ //g' )
        local val=$(echo "${line[1]}" | sed 's/ //g' )

        case $key in
            root)
                _ROOT="$val"
                ;;
            prefered_dialog)
                _DIALOG="$val"
                ;;
            *)
                echo "Unroconized configuration key $key"
                exit 1
        esac

    done < $config_file
}


load_config

# make a check of version only for other commands than
# completion and update/check-update commands, to not 
# make noises when opening shell.
case $1 in
    bash-completion)
        completion
        ;;
    
    install)
        auto_check
        install_go $2
        ;;
    
    use)
        auto_check
        setpath $2 $3
        ;;
    
    list)
        auto_check
        list_go
        ;;
    
    available)
        auto_check
        remote_list
        ;;
    
    -h|--help|help)
        auto_check
        printHelp
        ;;

    -v|--version|version)
        auto_check
        version
        ;;

    local-project)
        auto_check
        local_project $2 $3
        ;;

    list-recommended)
        auto_check
        list_recommended
        ;;

    install-recommended)
        auto_check
        install_recommended $2
        ;;

    check-update)
        checkupdate "warn"
        ;;

    update)
        checkupdate "update"
        ;;

    install-package)
        auto_check
        search_install $2
        ;;

    *)
        auto_check
        printHelp
        exit 1
        ;;
esac
