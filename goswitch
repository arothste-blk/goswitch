#!/bin/bash

CMD=$(basename $0)
_ROOT="$HOME/.go"
_GOROOTPATH=${_ROOT}/root
_GOPATH=${_ROOT}/path

setpath(){
    VERSION=$1
    GOROOT=${_GOROOTPATH}/go-${VERSION}
    GOPATH=${_GOPATH}/go-${VERSION}

    if [ ! -d $GOROOT ]; then
        echo "Go $VERSION is not installed, would you like to install it right now ?"
        echo -n "yes, y ? "
        read -a RESP
        RESP=$(echo "$RESP" | tr "[a-z]" "[A-Z]") 
        echo "Answered: $RESP"
        case $RESP in
            YES|Y)
                install_go $VERSION
                ;;
            *)
                exit 1
                ;;
        esac
    fi

    echo "# you must call eval \$("$(basename $0)" use ${VERSION})"
    [ -d ${GOROOT} ] && echo "export GOROOT=${GOROOT}; export PATH=\$GOROOT/bin:\$PATH"
    [ -d ${GOPATH} ] && echo "export GOPATH=${GOPATH}; export PATH=\$GOPATH/bin:\$PATH"

    if [ "$2" == "default" ]; then

        START_COMMENT="- GOSWITCH - START - DO NOT REMOVE THAT COMMENT"
        END_COMMENT="- GOSWITCH - END - DO NOT REMOVE THAT COMMENT"

        # Remove old entry
        SEDREM="sed -i '/${START_COMMENT}/,/${END_COMMENT}/d' ~/.profile"
        eval $SEDREM

        # add new entry
        cat >> ~/.profile <<EOF
# ${START_COMMENT}
export GOPATH=${GOPATH}
export GOROOT=${GOROOT}
export PATH=\$GOPATH/bin:\$GOROOT/bin:\$PATH
# ${END_COMMENT}
EOF

    echo -e "\E[036mOk, you can now open new shell and/or reload ~/.profile (source ~/.profile)" >&2
    fi
}

install_go(){
    echo "install go $1"
    VERSION=$1
    u="https://storage.googleapis.com/golang/go${VERSION}.linux-amd64.tar.gz"
    echo "Downloading $u"
    GOROOT=${_GOROOTPATH}/go-${VERSION}
    [ -d ${GOROOT} ] && echo -e "\E[32m$GOROOT already exists, if you want to reinstall, please remove that directory first\E[0m" && exit 1

    pushd /tmp 2>&1 >/dev/null
        curl --fail -L -# "$u" -o go-${VERSION}.tgz
        RES=$?
        if [ $RES != "0" ]; then
            echo -ne "\n\n\E[31mGo version \"$VERSION\" not found, use \"${CMD} available\" to check version\E[0m\n"
            exit 1
        fi

        tar xf go-${VERSION}.tgz
        rm -rf go-${VERSION}.tgz

        mkdir -p $_GOROOTPATH
        mv go ${_GOROOTPATH}/go-${VERSION}
    popd 2>&1 >/dev/null

    # create GOPATH
    GOPATH=${_GOPATH}/go-${VERSION}
    mkdir -p $GOPATH/bin
    mkdir -p $GOPATH/pkg
    mkdir -p $GOPATH/src
}


list_go(){
    for v in $(ls -1 $_GOROOTPATH); do
        echo $v | sed 's/^go-//'
    done
}

remote_list(){
    curl -sL https://golang.org/dl/ | grep -o 'id="go.*"' | sed -r 's/id=".*go(.*)"/\1/' | uniq | sort -ru
}

printHelp(){
    echo "${CMD} command <version>"
    echo "Commands:"
    echo "   list:                  list installed version from $_ROOT directory"
    echo "   available:             list installable go version from golang.org"
    echo "   install <version>:     install go-<version> (version should be x.y.z,"
    echo "                          eg. ${CMD} install 1.9.1)"
    echo "   use <version>:         to be call with \"eval \$(${CMD} use <version>)\""
    echo "                          to set env vars on current shell"
    echo "   use <version> default: set ~/.profile to use that version in next login session"
    echo "                          or if you "source" ~/.profile script"
    echo "   local-project [dir]:   use [dir] or current directory if [dir] is not"
    echo "                          provided to create a local projecct. That creates"
    echo "                          a bin/activate and bin/deactivate to use with 'source' command"
    echo "                          eg. ${CMD} local-project /tmp/myproject"
    echo "   bash-completion:       Set bash completion, please do 'source <(${CMD} bash-completion)'"
    echo "                          You may add this line in you ~/.profile, ~/.bash_profile or ~/.bashrc"
}


local_project() {
    [[ -z "$1" ]] && folder="." || folder=$1
    folder=$(realpath $folder)
    mkdir -p ${folder}/{src,bin,pkg}
    cat > ${folder}/bin/activate << EOF
export GOPATH=${folder}:\$GOPATH
export PATH=${folder}/bin:\$PATH
echo "Now in a local project for Go
echo "go get command will install in ${folder}/bin and ${folder}/src
#exec $SHELL
EOF

    cat > ${folder}/bin/deactivate << EOF
export GOPATH=$GOPATH
export GOROOT=$GOROOT
export PATH=$PATH
#exec $SHELL
EOF

    echo "You can now use:" 
    echo "source ${folder}/bin/activate"
    echo "to activate environemnet"
    echo 
    echo "You can deactivate environment using"
    echo "source ${folder}/deactivate"
}

completion() {
    cat << EOF
# bash completion for ${CMD}                                   -*- shell-script -*-
__start_${CMD}()
{
    local cur prev opts
    COMPREPLY=()
    cur="\${COMP_WORDS[COMP_CWORD]}"
    prev="\${COMP_WORDS[COMP_CWORD-1]}"
    opts="install use list available local-project --help -h bash-completion"


    case \${prev} in 
        local-project)
            COMPREPLY=( \$(compgen -f \${cur}) )
            return 0
            ;;
        install)
            opts=\$(${CMD} available)
            ;;
        use)
            opts=\$(${CMD} list)
            ;;
    esac

    COMPREPLY=( \$(compgen -W "\${opts}" -- \${cur}) )
    return 0
}
complete -o default -F __start_${CMD} ${CMD}
EOF

}

case $1 in
    bash-completion)
        completion
        ;;
    install)
        install_go $2
        ;;
    use)
        setpath $2 $3
        ;;
    list)
        list_go
        ;;
    available)
        remote_list
        ;;
    -h|--help)
        printHelp
        ;;
    local-project)
        local_project $2
        ;;
    *)
        printHelp
        exit 1
        ;;
esac
